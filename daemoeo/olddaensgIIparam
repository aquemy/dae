
######                 General    ######
 --help=0                                 # -h : Prints this message
 --stopOnUnknownParam=1                   # Stop if unkown param entered
 --seed=1329829648                        # -S : Random number seed

######    Evaluation              ######
 --bmax-init=10000                        # -B : Number of allowed expanded nodes for the initial computation of b_max
 --fitness-weight=10                      # -W : Unknown weight in the feasible and unfeasible fitness computation
 --fitness-penalty=10000                      # -w : Penalty in the unfeasible fitnesses computation
 --bmax-fixed=0                           # -b : Fixed number of allowed expanded nodes. Overrides bmaxinit if != 0
 --bmax-last-weight=3                     # -T : Weighting for the b_max used during the last search towards the end goal (must be strictly positive)
 --bmax-quantile=0.5                      # -Q : Quantile to use for estimating b_max (in [0,1], 0.5=median)

######    Evolution Engine        ######
 --popSize=100                             # -P : Population Size
 --updateArch=1                           # Update the archive at each gen.

######    Initialization          ######
 --lmax-initcoef=2                        # -N : l_max will be set to the size of the chrono partition * this coefficient
 --lmin=1                                 # -M : Minimum number of goals in a decomposition

######    Logger                  ######
 --verbose=quiet                          # -v : Set the verbose level
 --print-verbose-levels=0                 # -l : Print verbose levels
 --output=                                # -o : Redirect a standard output to a file

######    Output                  ######
 --resDir=Res                             # Directory to store DISK outputs
 --eraseDir=1                             # erase files in dirName if any
 --printPop=0                             # Print sorted pop. every gen.
 --storeArch=1                            # Store the archive's objective vectors at each gen.
 --printArch=1                            # Print the archive at each gen.
 --contribution=1                         # Store the contribution of the archive at each gen.
 --entropy=1                              # Store the entropy of the archive at each gen.
 --printStats=1                           # Print Best/avg/feasible every gen.

######    Persistence             ######
 --Load=                                  # -L : A save file to restart from
 --recomputeFitness=0                     # -r : Recompute the fitness after re-loading the pop.?
 --saveFrequency=0                        # Save every F generation (0 = only final state, absent = never)
 --saveTimeInterval=0                     # Save every T seconds (0 or absent = never)
 --status=./daensgaII.status              # Status file

######    Problem                 ######
 --domain=./benchmarks/zenoMiniMulti/domain-zeno-time-miniRisk.pddl # -D : PDDL domain file REQUIRED 
 --instance=./benchmarks/zenoMiniMulti/zenoMiniMulti.pddl # -I : PDDL instance file REQUIRED 
 --sequential=0                           # -q : Is the problem a sequential one? REQUIRED 
 --objective=Add                          # -Z : 2nd objective to take into account (Add(additive cost )/Max(max cost)

######    Stopping criterion      ######
 --maxGen=1000                             # -G : Maximum number of generations
 --steadyGen=1000                          # -s : Number of generations with no improvement
 --minGen=0                               # -g : Minimum number of generations
 --maxEval=0                              # -E : Maximum number of evaluations (0 = none)
 --CtrlC=0                                # -C : Terminate current generation upon Ctrl C

######    Variation               ######
 --radius=2                               # -R : Number of neighbour goals to consider for the addGoal mutation
 --proba-change=0.8                       # -k : Probability to change an atom for the changeAtom mutation
 --proba-del-atom=0.5                     # -p : Average probability to delete an atom for the delAtom mutation
 --w-delgoal=1                            # -a : Relative weight defining the probability to call the delGoal mutation
 --w-addgoal=1                            # -A : Relative weight defining the probability to call the addGoal mutation
 --w-delatom=3                            # -u : Relative weight defining the probability to call the delAtom mutation
 --w-addatom=1                            # -d : Relative weight defining the probability to call the addAtom mutation
 --maxtry-candidate=0                     # -y : Maximum number of atoms to try when searching for a candidate in the changeAtom mutation
 --maxtry-mutex=0                         # -z : Maximum number of atoms to try when searching for mutexes in the changeAtom mutation
 --proba-cross=0.2                        # -c : Probability to apply a cross-over
 --proba-mut=0.8                          # -m : Probability to apply one of the mutation
